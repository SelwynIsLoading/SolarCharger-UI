@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using raspi.DTOs
@using raspi.Services
@inject CoinSlotService CoinSlotService

<MudDialog>
    <DialogContent>
        <div class="container py-5">
            <div class="row justify-content-center">
                <div class="col-12 text-center mb-5">
                    <h2 class="display-1 fw-bold text-primary">
                        Insert the required coins to begin charging
                    </h2>
                </div>
            </div>

            <div class="row justify-content-center mb-5">
                <div class="col-md-10">
                    <div class="card shadow-sm">
                        <div class="card-body text-center p-5">
                            <h3 class="display-4 text-muted mb-4">Total amount inserted</h3>
                            <div class="display-1 fw-bold text-primary mb-4" style="font-size: 8rem;">@coinTotal</div>
                            <p class="fs-2 text-muted mb-0">
                                Total charging time: 
                                <span class="fw-bold fs-1">@(TimeSpan.FromSeconds(timeTotal).ToString(@"hh\:mm\:ss"))</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row justify-content-center">
                <div class="col-md-10">
                    <div class="card shadow-sm">
                        <div class="card-body p-5">
                            <h3 class="display-4 text-primary mb-4 text-center">Charging Rates</h3>
                            <div class="row row-cols-2 row-cols-md-4 g-4">
                                <div class="col">
                                    <div class="card h-100 border-0 bg-light">
                                        <div class="card-body text-center">
                                            <div class="display-4 fw-bold text-primary mb-2">₱1</div>
                                            <p class="fs-3 mb-0">2 mins</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="card h-100 border-0 bg-light">
                                        <div class="card-body text-center">
                                            <div class="display-4 fw-bold text-primary mb-2">₱5</div>
                                            <p class="fs-3 mb-0">12 mins</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="card h-100 border-0 bg-light">
                                        <div class="card-body text-center">
                                            <div class="display-4 fw-bold text-primary mb-2">₱10</div>
                                            <p class="fs-3 mb-0">25 mins</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="card h-100 border-0 bg-light">
                                        <div class="card-body text-center">
                                            <div class="display-4 fw-bold text-primary mb-2">₱20</div>
                                            <p class="fs-3 mb-0">55 mins</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <div class="d-flex justify-content-end gap-4">
            <button @onclick="CloseDialog" 
                    class="btn btn-outline-secondary btn-lg px-5 py-4 fs-2">
                Cancel
            </button>
            <button @onclick="Proceed" 
                    class="btn btn-primary btn-lg px-5 py-4 fs-2">
                Proceed
            </button>
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance? Dialog { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<int> OnTimeCallback { get; set; }
    [Parameter] public EventCallback<int> OnCoinCallback { get; set; }
    private bool CoinInserting;
    
    private int coinTotal = 0;
    private int timeTotal = 0;
    
    private static readonly Dictionary<int, int> _pulseToSeconds = new()
    {
        { 1, 120 },
        { 5, 720 },
        { 10, 1500 },
        { 20, 3300 }
    };
    
    private HubConnection? _hubConnection;
    private string coinMessage = "Waiting for coin...";
    private string status = "";

    private static int GetSeconds(int pulses)
    {
        return _pulseToSeconds.TryGetValue(pulses, out int seconds)
            ? seconds
            : 0;
    }

    protected override async Task OnInitializedAsync()
    {
        // await StartCoinSlot();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/coinhub"))
            .Build();

        _hubConnection.On<CoinInsertedDto>("CoinInserted", (dataObj) =>
        {
            InvokeAsync(() =>
            {
                var seconds = GetSeconds(dataObj.Pulses);
                timeTotal += seconds;
                coinTotal += dataObj.Pulses;
                StateHasChanged();
            });
        });

        await _hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartCoinSlot();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }

        await StopCoinSlot();
    }

    private async Task CloseDialog()
    {
        await StopCoinSlot();
        Dialog?.Close(DialogResult.Ok(true));
    }

    private async Task Proceed()
    {
        await StopCoinSlot();
        await OnTimeCallback.InvokeAsync(timeTotal);
        await OnCoinCallback.InvokeAsync(coinTotal);
        await OnClose.InvokeAsync();
        Dialog?.Close();
    }

    private async Task StartCoinSlot()
    {
        var result = await CoinSlotService.Start();
        if (!result.Success)
        {
            status = result.ErrorMessage;
        }
    }
    private async Task StopCoinSlot()
    {
        var result = await CoinSlotService.Stop();
        if (!result.Success)
        {
            status = result.ErrorMessage;
        }
    }
}