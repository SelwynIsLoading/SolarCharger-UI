@using Microsoft.AspNetCore.SignalR.Client
@using raspi.Controllers
@using raspi.Services
@inject FingerprintService FingerprintService
@inject NavigationManager navigationManager
@implements IAsyncDisposable

<MudDialog>
    <DialogContent>
        <div class="container py-5">
            <div class="row justify-content-center">
                <div class="col-12 text-center mb-5">
                    <div class="card shadow-sm">
                        <div class="card-body p-5">
                            <h2 class="display-1 fw-bold text-primary mb-5">
                                Fingerprint Verification
                            </h2>
                            
                            <div class="fingerprint-icon mb-4">
                                <i class="fas fa-fingerprint fa-6x text-primary"></i>
                            </div>

                            <p class="fs-1 text-muted mb-5" style="line-height: 1.5;">
                                Please wait for the fingerprint sensor to light up, then place your fingerprint.
                            </p>

                            <div class="status-container p-4 bg-light rounded-3 mb-4">
                                <h3 class="fs-2 text-primary mb-3">@enrollStatus</h3>
                                <h3 class="fs-2 text-primary mb-3">@eventType</h3>
                                <h3 class="fs-2 text-primary">@status</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <div class="d-flex justify-content-end gap-4">
            <button @onclick="CloseDialog" 
                    class="btn btn-outline-secondary btn-lg px-5 py-4 fs-2">
                Cancel
            </button>
            @* <button @onclick="Proceed"  *@
            @*         class="btn btn-primary btn-lg px-5 py-4 fs-2"> *@
            @*     Proceed *@
            @* </button> *@
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance? Dialog { get; set; }
    [Parameter] public EventCallback<int> OnClose { get; set; }
    [Parameter] public string SlotNumber { get; set; } = "";
    [Parameter] public bool IsTimerRunning { get; set; }
    [Parameter] public int UserIdMatch { get; set; }
    [Parameter] public bool IsForVerification { get; set; }

    private string Status { get; set; } = "";
    private int FingerprintId { get; set; } = -1;
    private HubConnection? _hubConnection;
    private string status = "Waiting...";
    private string eventType = "";
    private string userId = "";
    private string enrollStatus = "";
    private bool _isDisposed;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(navigationManager.ToAbsoluteUri("/fingerprinthub"))
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On<FingerprintController.FullFingerprintEvent>("FingerprintDetected", HandleFingerprintEvent);

            await _hubConnection.StartAsync();
            
            if (!IsTimerRunning && !IsForVerification)
            {
                await TriggerEnrollment();
            }
            else
            {
                await TriggerVerification();
            }
        }
        catch (Exception ex)
        {
            status = $"Error connecting to hub: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleFingerprintEvent(FingerprintController.FullFingerprintEvent data)
    {
        if (_isDisposed) return;

        try
        {
            if (data.UserId >= 0)
            {
                if (IsTimerRunning && data.EventType.ToUpper() == "VERIFY_MATCH")
                {
                    FingerprintId = data.UserId;
                    if (UserIdMatch != FingerprintId)
                    {
                        Status = "Fingerprint does not match!";
                        return;
                    }
                    await Proceed();
                    return; // Exit early after proceeding
                }

                if (data.EventType.ToUpper() == "VERIFY_MATCH")
                {
                    FingerprintId = data.UserId;
                    if (UserIdMatch != FingerprintId)
                    {
                        Status = "Fingerprint does not match!";
                        return;
                    }
                    await Proceed();
                    return; // Exit early after proceeding
                }
                if (!IsTimerRunning && data.EventType.ToUpper() == "ENROLL_SUCCESS")
                {
                    FingerprintId = data.UserId;
                    await Proceed();
                    return; // Exit early after proceeding
                }
            }
            
            // Only update UI if we haven't proceeded
            eventType = data.EventType;
            userId = data.UserId.ToString();
            status = $"{data.EventType.ToUpper()}: {data.Message}";
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            status = $"Error processing event: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task TriggerEnrollment()
    {
        try
        {
            using var http = new HttpClient();
            var response = await http.PostAsync("http://localhost:8000/fingerprint/enroll", null);

            enrollStatus = response.IsSuccessStatusCode 
                ? "Enrollment process started."
                : $"Failed to start enrollment: {response.StatusCode}";
        }
        catch (Exception ex)
        {
            enrollStatus = $"Error: {ex.Message}";
        }
    }

    private async Task TriggerVerification()
    {
        try
        {
            using var http = new HttpClient();
            var response = await http.PostAsync("http://localhost:8000/fingerprint/verify", null);

            enrollStatus = response.IsSuccessStatusCode 
                ? "Verification process started."
                : $"Failed to start verification: {response.StatusCode}";
        }
        catch (Exception ex)
        {
            enrollStatus = $"Error: {ex.Message}";
        }
    }

    private void CloseDialog()
    {
        Dialog?.Close(DialogResult.Cancel());
    }

    private async Task Proceed()
    {
        if (_isDisposed) return;

        try
        {
            // Ensure we're on the UI thread
            await InvokeAsync(() =>
            {
                // First close the dialog
                Dialog?.Close(DialogResult.Ok(FingerprintId));
            });
            
            // Then cleanup the connection
            if (_hubConnection != null)
            {
                await _hubConnection.DisposeAsync();
                _hubConnection = null;
            }
        }
        catch (Exception ex)
        {
            status = $"Error in Proceed: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CheckIfStillActive()
    {
        var result = await FingerprintService.CheckIfStillActive(SlotNumber);
        if (result.Success)
        {
            Status = result.Data ? "" : "This slot still has its owner's device";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_isDisposed) return;
        _isDisposed = true;

        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
            _hubConnection = null;
        }
    }
}